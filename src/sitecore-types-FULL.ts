/**
 * Sitecore GraphQL TypeScript Type Definitions
 * AUTO-GENERATED from introspectionSchema-FULL.json
 * Generated: 2025-10-16 21:00:33
 *
 * Source: .github\introspectionSchema-FULL.json
 * Total types: 1934
 *
 * DO NOT EDIT THIS FILE MANUALLY!
 * Run: .\generate-types-full.ps1 to regenerate
 */

// ============================================
// SCALAR TYPES
// ============================================

export type ID = string;
export type String = string;
export type Boolean = boolean;
export type Int = number;
export type Float = number;
export type Date = string;
export type DateTime = string;
export type DateTimeOffset = string;
export type Seconds = number;
export type Milliseconds = number;
export type Decimal = number;
export type JSON = any;

// ============================================
// Query
// Kind: OBJECT
// Fields: 4
// ============================================

export interface Query {
  /** Allows querying items from the content tree */
  item? /* args: path: string, language: string, version: number */ : Item;
  /** Allows querying the Content Search indexes */
  search? /* args: first: number, after: string, rootItem: string, keyword: string, language: string, latestVersion: boolean, index: string, fieldsEqual: ItemSearchFieldQuery[], facetOn: string[] */ : ContentSearchResults;
  /** Access to site definitions */
  sites? /* args: name: string, current: boolean, includeSystemSites: boolean */ : SiteGraphType[];
  /** Allows access to the Sitecore Templates */
  templates? /* args: path: string */ : ItemTemplate[];
}

// ============================================
// Mutation
// Kind: OBJECT
// Fields: 3
// ============================================

export interface Mutation {
  /** Creates a new Sitecore item */
  createItem? /* args: name: string, template: string, parent: string, language: string, fields: FieldValueInput[] */ : Item;
  /** Deletes the item specified */
  deleteItem? /* args: path: string, deletePermanently: boolean */ : boolean;
  /** Updates an existing Sitecore item */
  updateItem? /* args: path: string, language: string, version: number, name: string, fields: FieldValueInput[] */ : Item;
}

// ============================================
// Item
// Kind: INTERFACE
// Fields: 20
// ============================================

export interface Item {
  /** Security access rights for current user */
  access?: ItemAccess;
  /** Child items in the content hierarchy */
  children /* args: requirePresentation: boolean, includeTemplateIDs: string[], first: number, after: ID */ : Item[];
  database: string;
  displayName: string;
  /** Single field by name or ID */
  field? /* args: name: string */ : ItemField;
  /** All item fields. Fields can be treated as their type to get detailed info. */
  fields /* args: ownFields: boolean, excludeStandardFields: boolean */ : ItemField[];
  hasChildren /* args: requirePresentation: boolean, includeTemplateIDs: string[] */ : boolean;
  icon: string;
  id /* args: format: string */ : ID;
  /** Collection of item insert options. */
  insertOptions: InsertOptions[];
  /** Uniquely identifies id, lang, version */
  itemUri: string;
  language: ItemLanguage;
  name: string;
  /** Parent in the content hierarchy. */
  parent?: Item;
  path: string;
  /** Defines item fields */
  template: ItemTemplate;
  /** Gets a URL link to the item */
  url /* args: options: ItemUrlOptions */ : string;
  version: number;
  versions /* args: allLanguages: boolean */ : Item[];
  workflow: ItemWorkflow;
}

// ============================================
// ItemTemplate
// Kind: OBJECT
// Fields: 5
// Implements: InsertOptions
// ============================================

export interface ItemTemplate {
  baseTemplates?: ItemTemplate[];
  fields?: ItemTemplateField[];
  id /* args: format: string */ : ID;
  name: string;
  ownFields?: ItemTemplateField[];
}

// ============================================
// ItemTemplateField
// Kind: OBJECT
// Fields: 10
// ============================================

export interface ItemTemplateField {
  id? /* args: format: string */ : ID;
  name: string;
  section: string;
  sectionSortOrder: number;
  shared: boolean;
  sortOrder: number;
  source: string;
  title: string;
  type: string;
  unversioned: boolean;
}

// ============================================
// ItemField
// Kind: INTERFACE
// Fields: 10
// ============================================

export interface ItemField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** . For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// ItemLanguage
// Kind: OBJECT
// Fields: 5
// ============================================

export interface ItemLanguage {
  displayName: string;
  englishName: string;
  icon?: string;
  name: string;
  nativeName: string;
}

// ============================================
// ItemAccess
// Kind: OBJECT
// Description: Current user's security access rights to an item.
// Fields: 14
// ============================================

export interface ItemAccess {
  /** Determines whether the specified branch template can be added as a child of the item. */
  canAddBranch? /* args: branchId: string */ : boolean;
  /** Determines whether the specified template can be added as a child of the item. */
  canAddTemplate? /* args: templateId: string */ : boolean;
  /** Determines whether the item can be administered (access rights set). */
  canAdmin?: boolean;
  /** Determines whether this item can be copied to the specified destination. */
  canCopyTo? /* args: itemId: string */ : boolean;
  /** Determines whether a child item under this item can be created. */
  canCreate?: boolean;
  /** Determines whether the item can be deleted. */
  canDelete?: boolean;
  /** Determines whether the item can be duplicated. */
  canDuplicate?: boolean;
  /** Determines whether this item can be moved to the specified destination. */
  canMoveTo? /* args: itemId: string */ : boolean;
  /** Determines whether the item can be read. */
  canRead?: boolean;
  /** Determines whether the item can be read in the current language. */
  canReadLanguage?: boolean;
  /** Determines whether this item version can be removed. */
  canRemoveVersion?: boolean;
  /** Determines whether the item can be renamed. */
  canRename?: boolean;
  /** Determines whether the item can be written. */
  canWrite?: boolean;
  /** Determines whether the item can be written in the current language. */
  canWriteLanguage?: boolean;
}

// ============================================
// ItemWorkflow
// Kind: OBJECT
// Fields: 5
// ============================================

export interface ItemWorkflow {
  canEdit: boolean;
  canSave: boolean;
  workflowId?: string;
  workflowName?: string;
  workflowState?: ItemWorkflowState;
}

// ============================================
// ItemWorkflowState
// Kind: OBJECT
// Fields: 3
// ============================================

export interface ItemWorkflowState {
  /** Only a final workflow state is publishable. */
  final?: string;
  /** The item ID of the workflow state item */
  id?: ID;
  name?: string;
}

// ============================================
// InsertOptions
// Kind: INTERFACE
// Fields: 2
// ============================================

export interface InsertOptions {
  /** The GUID of this insert option. */
  id /* args: format: string */ : ID;
  /** The name of this insert option. */
  name: string;
}

// ============================================
// TextField
// Kind: OBJECT
// Fields: 11
// Implements: ItemField
// ============================================

export interface TextField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// DateField
// Kind: OBJECT
// Fields: 13
// Implements: ItemField
// ============================================

export interface DateField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The field's value as a UTC epoch date suitable for constructing a Javascript Date */
  dateValue?: number;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The field's value as a preformatted date. */
  formattedDateValue? /* args: format: string, offset: number */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// ImageField
// Kind: OBJECT
// Fields: 21
// Implements: ItemField
// ============================================

export interface ImageField {
  /** The alternate text for the image */
  alt?: string;
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** The description of the media item */
  description?: string;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The extension of the media item (e.g. 'jpg', 'gif') */
  extension?: string;
  /** Height of the image at full size */
  height?: number;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The keywords of the media item */
  keywords?: string;
  /** The MIME type of the media item (e.g. 'image/jpeg') */
  mimeType?: string;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The size, in bytes, of the media item */
  size?: number;
  /** The URL to the media item */
  src? /* args: maxWidth: number, maxHeight: number */ : string;
  /** The title of the media item */
  title?: string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
  /** Width of the image at full size */
  width?: number;
}

// ============================================
// LinkField
// Kind: OBJECT
// Fields: 19
// Implements: ItemField
// ============================================

export interface LinkField {
  /** The anchor name this link points to (e.g. #foo) */
  anchor?: string;
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** The CSS class on this link */
  className?: string;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The type of link this is (e.g. 'external') */
  linkType?: string;
  /** The name of this field. */
  name: string;
  /** The query string on this link */
  queryString?: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The HTML target attribute of the link (e.g. __blank) */
  target?: string;
  /** The internal item that this link targets (null for external or other link types) */
  targetItem?: Item;
  /** The body text of the link */
  text?: string;
  /** The URL/href of this link */
  url?: string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// FileField
// Kind: OBJECT
// Fields: 18
// Implements: ItemField
// ============================================

export interface FileField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** The description of the media item */
  description?: string;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The extension of the media item (e.g. 'jpg', 'gif') */
  extension?: string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The keywords of the media item */
  keywords?: string;
  /** The MIME type of the media item (e.g. 'image/jpeg') */
  mimeType?: string;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The size, in bytes, of the media item */
  size?: number;
  /** The title of the media item */
  title?: string;
  /** The URL to the media item */
  url?: string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// CheckboxField
// Kind: OBJECT
// Fields: 12
// Implements: ItemField
// ============================================

export interface CheckboxField {
  /** The field's value as a boolean value */
  boolValue?: boolean;
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// IntegerField
// Kind: OBJECT
// Fields: 12
// Implements: ItemField
// ============================================

export interface IntegerField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The field's value as an integer */
  intValue?: number;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// NumberField
// Kind: OBJECT
// Fields: 12
// Implements: ItemField
// ============================================

export interface NumberField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The field's value as a floating-point number */
  numberValue?: number;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// MultilistField
// Kind: OBJECT
// Fields: 14
// Implements: ItemField
// ============================================

export interface MultilistField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The number of items that this field references */
  count?: number;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The IDs of the referenced items */
  targetIds?: string[];
  /** The item(s) that this field references */
  targetItems?: Item[];
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// LookupField
// Kind: OBJECT
// Fields: 13
// Implements: ItemField
// ============================================

export interface LookupField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The item ID that this field references */
  targetId? /* args: format: string */ : ID;
  /** The item that this field references */
  targetItem?: Item;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// ReferenceField
// Kind: OBJECT
// Fields: 14
// Implements: ItemField
// ============================================

export interface ReferenceField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The path of the referenced item */
  path?: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The item ID that this field references */
  targetId? /* args: format: string */ : ID;
  /** The item that this field references */
  targetItem?: Item;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// LayoutField
// Kind: OBJECT
// Fields: 13
// Implements: ItemField
// ============================================

export interface LayoutField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Gets the layout definition for a specific Sitecore device */
  device? /* args: id: string */ : LayoutFieldDevice;
  /** Within this layout field, enumerates the Sitecore devices which have layout defined */
  devices?: LayoutFieldDevice[];
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
}

// ============================================
// LayoutFieldDevice
// Kind: OBJECT
// Fields: 5
// ============================================

export interface LayoutFieldDevice {
  /** Gets the device item */
  device?: Item;
  /** Gets the device ID */
  id?: string;
  /** Gets the device item */
  layout?: Item;
  /** Gets the layout ID that this device uses */
  layoutId?: string;
  /** Gets the list of renderings present on this layout */
  renderings?: LayoutFieldRendering[];
}

// ============================================
// LayoutFieldRendering
// Kind: OBJECT
// Fields: 6
// ============================================

export interface LayoutFieldRendering {
  /** Gets the raw value of the rendering's datasource property (normally an item ID or null) */
  datasource?: string;
  /** Gets the rendering's datasource item (or the context item if not set) */
  datasourceItem?: Item;
  /** The unique identifier of this rendering instance (unique within this layout field) */
  id?: string;
  /** Gets the rendering's parameters in query string format */
  parameters?: string;
  /** The placeholder this rendering is supposed to live in */
  placeholder?: string;
  /** Gets the item that represents this rendering */
  renderingItem?: Item;
}

// ============================================
// NameValueListField
// Kind: OBJECT
// Fields: 12
// Implements: ItemField
// ============================================

export interface NameValueListField {
  /** Whether the current user can write to this field */
  canWrite: boolean;
  /** Whether the field value is a value from a language fallback item */
  containsFallbackValue: boolean;
  /** Whether the value is inherited from an item clone */
  containsInheritedValue: boolean;
  /** Whether the field value is a standard value */
  containsStandardValue: boolean;
  /** The definition of this field on its template (field metadata) */
  definition?: ItemTemplateField;
  /** Display name of the field */
  displayName?: string;
  /** The editable value of this field. If not in edit mode, this value is identical to 'rendered'. This value may contain raw HTML; do not encode when displaying */
  editable? /* args: fieldRendererParameters: string */ : string;
  /** The GUID of this field. */
  id /* args: format: string */ : ID;
  /** The name of this field. */
  name: string;
  /** The rendered value of this field (like rendered, but inline editing is disabled) */
  rendered? /* args: fieldRendererParameters: string */ : string;
  /** The raw value of this field. For rendered output to a page, use 'editable' or 'rendered' instead of this */
  value?: string;
  /** The key-value pairs in this field */
  values?: NameValueListValue[];
}

// ============================================
// NameValueListValue
// Kind: OBJECT
// Fields: 2
// ============================================

export interface NameValueListValue {
  /** The name of the name-value pair */
  name: string;
  /** The value of the name-value pair */
  value: string;
}

// ============================================
// ContentSearchResults
// Kind: OBJECT
// Fields: 2
// ============================================

export interface ContentSearchResults {
  facets?: ContentSearchFacet[];
  results?: ContentSearchResultConnection;
}

// ============================================
// ContentSearchResultConnection
// Kind: OBJECT
// Fields: 4
// ============================================

export interface ContentSearchResultConnection {
  /** Information to aid in pagination. */
  edges?: ContentSearchResultEdge[];
  /** A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for "{ edges { node } }" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the "cursor" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full "{ edges { node } } " version should be used instead. */
  items?: ContentSearchResult[];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing "5" as the argument to `first`, then fetch the total count so it could display "5 of 83", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`. */
  totalCount?: number;
}

// ============================================
// ContentSearchResult
// Kind: OBJECT
// Fields: 11
// ============================================

export interface ContentSearchResult {
  /** Gets a specific search index field on the result. Field is named by the search index, not an item template field name. */
  field? /* args: name: string */ : string;
  /** Gets all search index fields for this item. */
  fields?: ContentSearchFieldValue[];
  /** The item ID from the search index */
  id? /* args: format: string */ : ID;
  /** The complete search result item from the database (warning: has negative performance impacts on large result sets) */
  item?: Item;
  /** The item language from the search index */
  language?: string;
  /** The item name from the search index */
  name?: string;
  /** The item's full path from the search index */
  path?: string;
  /** The search index result relevancy score */
  score: number;
  /** The item's template name from the search index */
  templateName?: string;
  /** The item's ItemUri from the search index (database, ID, language, version). This is a unique identifier. */
  uri?: string;
  /** The item version number from the search index */
  version?: number;
}

// ============================================
// ContentSearchResultEdge
// Kind: OBJECT
// Description: An edge in a connection from an object to another object of type `ContentSearchResult`.
// Fields: 2
// ============================================

export interface ContentSearchResultEdge {
  /** A cursor for use in pagination */
  cursor: string;
  /** The item at the end of the edge */
  node?: ContentSearchResult;
}

// ============================================
// ContentSearchFacet
// Kind: OBJECT
// Fields: 2
// ============================================

export interface ContentSearchFacet {
  /** The facet name */
  name?: string;
  /** Gets all facet values. */
  values? /* args: hideEmpty: boolean */ : ContentSearchFacetValue[];
}

// ============================================
// ContentSearchFacetValue
// Kind: OBJECT
// Fields: 3
// ============================================

export interface ContentSearchFacetValue {
  count?: number;
  /** If the facet value is an item ID, gets the item it points to. Note that this can have negative performance implications when used with large numbers of facet values. */
  item?: Item;
  /** The facet value */
  value?: string;
}

// ============================================
// ContentSearchFieldValue
// Kind: OBJECT
// Fields: 2
// ============================================

export interface ContentSearchFieldValue {
  /** The search index field name */
  name: string;
  /** The field value in the index */
  value?: string;
}

// ============================================
// PageInfo
// Kind: OBJECT
// Description: Information about pagination in a connection.
// Fields: 4
// ============================================

export interface PageInfo {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: string;
  /** When paginating forwards, are there more items? */
  hasNextPage: boolean;
  /** When paginating backwards, are there more items? */
  hasPreviousPage: boolean;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: string;
}

// ============================================
// SiteGraphType
// Kind: OBJECT
// Fields: 18
// ============================================

export interface SiteGraphType {
  allowDebug?: boolean;
  browserTitle?: string;
  cacheHtml?: boolean;
  cacheMedia?: boolean;
  contentLanguage?: ItemLanguage;
  contentStartItem?: string;
  contentStartPath?: string;
  defaultDevice?: string;
  device?: string;
  displayDate?: string;
  displayMode?: string;
  hostName?: string;
  language?: string;
  name?: string;
  rootItem?: Item;
  rootPath?: string;
  startItem?: Item;
  startPath?: string;
}

// ============================================
// HELPER TYPES
// ============================================

/**
 * MCP Tool Response wrapper
 */
export interface MCPToolResponse<T = any> {
  content: Array<{
    type: 'text';
    text: string;
  }>;
  data?: T;
}

/**
 * Field discovery response
 */
export interface FieldDiscoveryResponse {
  totalFields: number;
  fields: Array<{
    name: string;
    value?: any;
    type?: string;
  }>;
}

/**
 * Version info response
 */
export interface VersionInfoResponse {
  version: number;
  versionCount: number;
}

// ============================================
// EXPORT ALL
// (interfaces already exported above)
// ============================================
